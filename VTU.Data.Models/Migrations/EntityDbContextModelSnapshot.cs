// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VTU.Data.Models;

#nullable disable

namespace VTU.Data.Models.Migrations
{
    [DbContext(typeof(EntityDbContext))]
    partial class EntityDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0-preview.3.23174.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RoleMenuTable", b =>
                {
                    b.Property<int>("MenusId")
                        .HasColumnType("int");

                    b.Property<int>("RolesId")
                        .HasColumnType("int");

                    b.HasKey("MenusId", "RolesId");

                    b.HasIndex("RolesId");

                    b.ToTable("t_RoleMenuTable");
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.Property<int>("RolesId")
                        .HasColumnType("int");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("RolesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("t_UserRoleTable", (string)null);

                    b.HasData(
                        new
                        {
                            RolesId = 1,
                            UsersId = 1
                        });
                });

            modelBuilder.Entity("VTU.Data.Models.Menus.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Component")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("组件路径");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2")
                        .HasComment("创建时间");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("菜单图标");

                    b.Property<int>("IsCache")
                        .HasColumnType("int")
                        .HasComment("是否缓存(0=禁用,1=启用)");

                    b.Property<int>("IsFrame")
                        .HasColumnType("int")
                        .HasComment("是否外链(0=禁用,1=启用)");

                    b.Property<int?>("MenuId")
                        .HasColumnType("int");

                    b.Property<string>("MenuName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("菜单名称");

                    b.Property<string>("MenuNameKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("菜单名key");

                    b.Property<string>("MenuType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("类型（M目录 C菜单 F按钮 L链接）");

                    b.Property<int>("OrderNum")
                        .HasColumnType("int")
                        .HasComment("显示顺序");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int")
                        .HasComment("父Id");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("路由地址");

                    b.Property<string>("Perms")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("权限字符串");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasComment("菜单状态(0=禁用,1=启用)");

                    b.Property<int>("SubNum")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDateTime")
                        .HasColumnType("datetime2")
                        .HasComment("更新时间时间");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasComment("乐观锁");

                    b.Property<int>("Visible")
                        .HasColumnType("int")
                        .HasComment("显示状态(0=禁用,1=启用)");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.ToTable("t_menu", t =>
                        {
                            t.HasComment("菜单表");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Component = "",
                            CreateDateTime = new DateTime(2023, 5, 8, 15, 7, 39, 43, DateTimeKind.Local).AddTicks(1390),
                            IsCache = 0,
                            IsFrame = 0,
                            MenuName = "系统设置",
                            MenuNameKey = "system",
                            MenuType = "M",
                            OrderNum = 0,
                            ParentId = 0,
                            Path = "/system",
                            Perms = "",
                            Status = 1,
                            SubNum = 0,
                            UpdateDateTime = new DateTime(2023, 5, 8, 15, 7, 39, 43, DateTimeKind.Local).AddTicks(1390),
                            Visible = 1
                        });
                });

            modelBuilder.Entity("VTU.Data.Models.Roles.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2")
                        .HasComment("创建时间");

                    b.Property<string>("DataScope")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("数据范围（1：全部数据权限 2：自定数据权限 3：本部门数据权限 4：本部门及以下数据权限））");

                    b.Property<int>("DelFlag")
                        .HasColumnType("int")
                        .HasComment("删除标志(0=禁用,1=启用)");

                    b.Property<bool>("DeptCheckStrictly")
                        .HasColumnType("bit")
                        .HasComment("部门树选择项是否关联显示");

                    b.Property<bool>("MenuCheckStrictly")
                        .HasColumnType("bit")
                        .HasComment("菜单树选择项是否关联显示");

                    b.Property<string>("RoleKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("角色权限");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("角色名称");

                    b.Property<int>("RoleSort")
                        .HasColumnType("int")
                        .HasComment("角色排序");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasComment("角色状态(0=禁用,1=启用)");

                    b.Property<DateTime>("UpdateDateTime")
                        .HasColumnType("datetime2")
                        .HasComment("更新时间时间");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasComment("乐观锁");

                    b.HasKey("Id");

                    b.ToTable("t_role", t =>
                        {
                            t.HasComment("角色表");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDateTime = new DateTime(2023, 5, 8, 15, 7, 39, 43, DateTimeKind.Local).AddTicks(1300),
                            DataScope = "1",
                            DelFlag = 0,
                            DeptCheckStrictly = false,
                            MenuCheckStrictly = false,
                            RoleKey = "admin",
                            RoleName = "管理员",
                            RoleSort = 0,
                            Status = 1,
                            UpdateDateTime = new DateTime(2023, 5, 8, 15, 7, 39, 43, DateTimeKind.Local).AddTicks(1320)
                        });
                });

            modelBuilder.Entity("VTU.Data.Models.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2")
                        .HasComment("创建时间");

                    b.Property<int>("DelFlag")
                        .HasColumnType("int")
                        .HasComment("删除标志(0=禁用,1=启用)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int")
                        .HasComment("用户性别(0=男,1=女,2=未知)");

                    b.Property<DateTime?>("LoginDate")
                        .HasColumnType("datetime2")
                        .HasComment("最后登录时间");

                    b.Property<string>("LoginIP")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("最后登录IP");

                    b.Property<string>("NickName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Password");

                    b.Property<string>("Phonenumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("手机号");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("密码加密的盐");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasComment("帐号状态(0=禁用,1=启用)");

                    b.Property<DateTime>("UpdateDateTime")
                        .HasColumnType("datetime2")
                        .HasComment("更新时间时间");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasComment("乐观锁");

                    b.HasKey("Id");

                    b.ToTable("t_user", t =>
                        {
                            t.HasComment("用户表");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DelFlag = 0,
                            Email = "dw@xmail.com",
                            Gender = 0,
                            NickName = "admin",
                            Password = "FWiumVdXOqkWHzXCXwXGDqxBZPJ+32nJRjm665ZQA14=",
                            Phonenumber = "12345678909",
                            Salt = "V4MNurlZRVEi2gBvhF3cXg==",
                            Status = 0,
                            UpdateDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("RoleMenuTable", b =>
                {
                    b.HasOne("VTU.Data.Models.Menus.Menu", null)
                        .WithMany()
                        .HasForeignKey("MenusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VTU.Data.Models.Roles.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.HasOne("VTU.Data.Models.Roles.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VTU.Data.Models.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VTU.Data.Models.Menus.Menu", b =>
                {
                    b.HasOne("VTU.Data.Models.Menus.Menu", null)
                        .WithMany("Children")
                        .HasForeignKey("MenuId");
                });

            modelBuilder.Entity("VTU.Data.Models.Menus.Menu", b =>
                {
                    b.Navigation("Children");
                });
#pragma warning restore 612, 618
        }
    }
}
